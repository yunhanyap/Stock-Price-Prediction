# install the dependencies
import numpy as np
import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
import matplotlib.pyplot as plt
plt.style.use('bmh')

# load the data
from google.colab import files
uploaded = files.upload()
## upload file into program

# store the data into a data fram
df = pd.read.csv('NFLX_Stock.csv')
df.head(6) # see first 6 rows of the data set

# Get the number of trading days
df.shape
#(252, 5) # number of trading days in a year

# visualise the close price data
plt.figure(figsize=(16,8))
plt.title('Netflix')
plt.xlabel('Days')
plt.ylabel('Close Price USD $)')
plt.plot(df['Close Price'])
plt.show()

# get the close price
df = df[['Close Price']]
df.head(4)

# create a var to predict the 'x' days out into the future
future_days = 25
# create a new column (target) shifted 'x' units/days up
df['Prediction'] = df df[['Close Price']].shifted(-future_days)
df.tails(4)

# create the feature data set(X) and convert it to a numpy array and remove the last 'x' rows/days
X = np.array(df.drop(['Prediction'], 1))[:-future_days]
print(X)

# create the target data set (y) and convert it a numpy array and get all of the target values except the last 'x' rows
y = np.array(df['Prediction'})[:-future_days]
print(y)

# split the data into 75% training and 25% testing 
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.25)

# create the models
# create the decision tree regressor model
tree = DecisionTreeRegressor().fit(x_train, y_train)
# create the linear regression model
lr = LinearRegression().fit(x_train, y_train)

# get the last 'x' rows of the feature data set
x_future = df.drop()['Prediction'], 1)[:-future_days]
x_future = x_future.tail(future_days)
x_future = np.array(x_future)
x_future

# show the model tree prediction
tree_prediction = tree.predict(x_future)
print(tree_prediction)
print()
# show the model linear regression prediction
lr_prediction = lr.predict(x_future)
print(Lr_prediction)

# visualise the data - Decision Tree Model
predictions = tree_prediction

valid = df[X.shape[0]:]
valid['Predictions'] = predictions
plt figure(figsize=(16, 8))
plt.title('Model')
plt.xlabel('Days')
plt.ylabel('Close Price USD ($)')
plt.plot(df['Close Price'])
plt.plot(valid[['Close Price', 'Predictions']])
plt.legend(['Orig', 'Val', 'Pred'])
plt.show()


# visualise the data - Linear Regression
predictions = lr_prediction

valid = df[X.shape[0]:]
valid['Predictions'] = predictions
plt figure(figsize=(16, 8))
plt.title('Model')
plt.xlabel('Days')
plt.ylabel('Close Price USD ($)')
plt.plot(df['Close Price'])
plt.plot(valid[['Close Price', 'Predictions']])
plt.legend(['Orig', 'Val', 'Pred'])
plt.show()
